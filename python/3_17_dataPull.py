lastTimeRec = 0; #global variable that records last timestamp imported
logPath='/Users/ravi/Dropbox/senior_design/log' #path to log file generated by MacOSX/BLE

#function that returns matched arrays of time and Z-acceleration
def dataPull():
	global lastTimeRec
	#declare holder variables
	t_holder = []
	aZ_holder = []
	t_output = []
	aZ_output = []
	#open file
	file = open(logPath,'r')
	for line in file:
		logString = line
		splitArray = logString.split(',')
		t_holder.append(int(splitArray[0]))
		aZ_holder.append(int(splitArray[1]))
	#find timestamp of last line
	end_time = int(t_holder[-1])
	#if this is the first time dataPull is called, import ~ last second of data
	if(lastTimeRec==0):lastTimeRec = 0; #global variable that records last timestamp imported
logPath='/Users/ravi/Dropbox/senior_design/log' #path to log file generated by MacOSX/BLE

#function that returns matched arrays of time and Z-acceleration
def dataPull():
	global lastTimeRec
	#declare holder variables
	t_holder = []
	aZ_holder = []
	t_output = []
	aZ_output = []
	#open file
	file = open(logPath,'r')
	for line in file:
		logString = line
		splitArray = logString.split(',')
		t_holder.append(int(splitArray[0]))
		aZ_holder.append(int(splitArray[1]))
	#find timestamp of last line
	end_time = int(t_holder[-1])
	#if this is the first time dataPull is called, import ~ last second of data
	if(lastTimeRec==0):
		import_cutoff = end_time - 1000
	#otherwise, import everything since the last 	
	else:
		import_cutoff = lastTimeRec
	#delete all members of array that we dont want
	for i_hold, val_hold in enumerate(t_holder):
		if(val_hold > import_cutoff):
			t_output.append(t_holder[i_hold])
			aZ_output.append((float(aZ_holder[i_hold])-16384)/500) #convert back to float value
	lastTimeRec=end_time
	return t_output, aZ_output

t, aZ = dataPull()
print t
print aZ
		import_cutoff = end_time - 1000
	#otherwise, import everything since the last 	
	else:
		import_cutoff = lastTimeRec
	#delete all members of array that we dont want
	for i_hold, val_hold in enumerate(t_holder):
		if(val_hold > import_cutoff):
			t_output.append(t_holder[i_hold])
			aZ_output.append((float(aZ_holder[i_hold])-16384)/500) #convert back to float value
	lastTimeRec=end_time
	return t_output, aZ_output

t, aZ = dataPull()
print t
print aZ
